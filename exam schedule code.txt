#include <bits/stdc++.h>
using namespace std;


int check (vector<int> v1,vector<int> v2){
    int i;
    unordered_map<int,int> mp;
    for(i=0;i<v1.size();i++){
        mp[v1[i]]++;
    }
    for(i=0;i<v2.size();i++){
        if(mp.find(v2[i])==mp.end()){
            return 0;
        }
    }
    return 1;
}
int main() {
   
   cout<<"enter the number of subjects"<<endl;
   cout<<"enter roll number of every student who is supposed to give the exam"<<endl;
   int n;
   cin>>n;
   vector<vector<int>> adj(n);
   int i,j;
  
   for(i=0;i<n;i++){
       int m; // number of students giving ith exam
       cin>>m;
       vector<int> v;
       for(j=0;j<m;j++){
           int d;
           cin>>d;    // pushing the roll number of that student in the vector
           v.push_back(d);
           
       }
       adj[i]=v;     // conating the roll number of the students giving ith exam
   }
   
   // now we will check which subjects have atleast one child common
   
   vector<vector<int>> graph(n); // using adjacent graph where graph[i] has neighbours of ith vertex
   for(i=0;i<n;i++){
       for(j=i+1;j<n;j++){
           if(check(adj[i],adj[j])==1){
               graph[i].push_back(j);
               graph[j].push_back(i);
           }
       }
   }
   
   // finding minimum slots
   
   vector<int> visited(n);   // visited array for n subjects
   vector<int> time(n);    // time array for n objects (for simplicity giving 0th time to all subjects later on it will be normalized to 12pm )
   int maxslot=0;
   for(i=0;i<n;i++){
       visited[i]=0;
       time[i]=0;
   }
  // here the subjects are represented by vertices and edges between 2 subjects represent that they have a child in common.
   int j;
   int ans=0;
   for(i=0;i<n;i++){
       
       if(visited[i]==1){
           continue;
       }
       visited[i]=1;
       queue<int> q;
       q.push(i);
       while(q.empty()!=1){
           int top=q.front();
           q.pop();
           for(j=0;j<graph[top].size();j++){
               if(time[top]==time[graph[top][j]]){
                   time[graph[top][j]]=time[graph[top][j]]+1;    //if time slot is same for adjacent vertices then increament the time slot of the adjacent vertex
                   ans=max(ans,time[graph[top][j]]);
                   
               }
               if(visited[graph[top][j]]==0){
                   visited[graph[top][j]]=1;                        // if the subject is not taken in consideration yet then add it to the queue.
                   q.push(graph[top][j]);
               }
           }
           
       }
       
       
       
   }
   
   
   cout<<(ans+1)<<endl;
   
   
   return 0;
}